#pragma once
#include <iostream>
#include "List.h"
namespace hashTC
{
	struct Object // другая структура Object - структура хэш-таблица, определена в другом пространстве имён
	{
		// объём хэш-таблицы на основе цепочек практически безграничен, здесь количество Э-в столько сколько нужно пользователю
		// здесь Э-ы сортируются на основе списков
		int Size; // количество записей в хэш-таблице
		char* (*GetKey)(void*); // функция получения ключа от Э-а хэш-таблицы
		listx::Object* Data;
		// внутри структуры Object из простанства имён listx создаётся массив списков
		Object(int size, char* (*f)(void*))
			// конструктор, принимает размер и функцию для получения ключа от Э-а и сохраняет их в таблице
			// выделяет память под эти списки, которые изначально были пустыми
		{
			Size = size;
			GetKey = f;
			Data = new listx::Object[Size];
		};
		// хэш=функция, отвечает за то, куда располагается элемент, то есть на какой позиции в массиве, она рассчитывается по ключу и возвращаемое значение находится в диапазоне от 0 до размера хэш-таблицы
		int HashFunction(char* key);
		void Insert(void* data); 			// функция добавления Э-а в хэш-таблицу
		listx::Element* Search(char* key);	// функция поиска Э-а по ключу в хэш-таблице
		void Delete(char* key);			// функция удаления Э-а по ключу
		void Scan(void f(listx::Element*));	// функция вывода хэш-таблицы
	};
	Object Create(int size, char* (*f)(void*));
	// создание хэш-таблицы, этот Create находится в пространстве имён hashTC
}
#pragma once
